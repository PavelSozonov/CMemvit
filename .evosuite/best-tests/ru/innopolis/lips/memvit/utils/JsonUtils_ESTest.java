/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 10 20:03:45 GMT 2017
 */

package ru.innopolis.lips.memvit.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import ru.innopolis.lips.memvit.model.ActivationRecord;
import ru.innopolis.lips.memvit.model.State;
import ru.innopolis.lips.memvit.model.StateImpl;
import ru.innopolis.lips.memvit.model.VarDescription;
import ru.innopolis.lips.memvit.utils.JsonUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      StateImpl stateImpl0 = new StateImpl("UnableDJo incremen6 [");
      // Undeclared exception!
      try { 
        jsonUtils0.getStackFromJson(stateImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         assertThrownBy("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      // Undeclared exception!
      try { 
        jsonUtils0.getStackFromJson((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ru.innopolis.lips.memvit.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      StateImpl stateImpl0 = new StateImpl("EPf_llXFuM{RdB");
      // Undeclared exception!
      try { 
        jsonUtils0.getHeapFromJson(stateImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         assertThrownBy("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      // Undeclared exception!
      try { 
        jsonUtils0.getHeapFromJson((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ru.innopolis.lips.memvit.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      StateImpl stateImpl0 = new StateImpl("");
      // Undeclared exception!
      try { 
        jsonUtils0.getEaxValueTypeFromJson(stateImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         assertThrownBy("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      // Undeclared exception!
      try { 
        jsonUtils0.getEaxValueFromJson((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ru.innopolis.lips.memvit.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      ActivationRecord[] activationRecordArray0 = new ActivationRecord[2];
      VarDescription[] varDescriptionArray0 = new VarDescription[3];
      // Undeclared exception!
      try { 
        jsonUtils0.buildJson(activationRecordArray0, varDescriptionArray0, varDescriptionArray0, "\n", "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ru.innopolis.lips.memvit.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      ActivationRecord[] activationRecordArray0 = new ActivationRecord[9];
      VarDescription[] varDescriptionArray0 = new VarDescription[6];
      String string0 = jsonUtils0.buildJson(activationRecordArray0, varDescriptionArray0, (VarDescription[]) null, "%", "%");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      ActivationRecord[] activationRecordArray0 = new ActivationRecord[5];
      String string0 = jsonUtils0.buildJson(activationRecordArray0, (VarDescription[]) null, (VarDescription[]) null, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      VarDescription[] varDescriptionArray0 = new VarDescription[2];
      String string0 = jsonUtils0.buildJson((ActivationRecord[]) null, varDescriptionArray0, varDescriptionArray0, "EPf_llXFuM{RdB", "EPf_llXFuM{RdB");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      ActivationRecord[] activationRecordArray0 = new ActivationRecord[1];
      VarDescription[] varDescriptionArray0 = new VarDescription[1];
      VarDescription varDescription0 = new VarDescription("Expected a ',' or '}'", "Expected a ',' or '}'", "", "");
      varDescriptionArray0[0] = varDescription0;
      VarDescription[] varDescriptionArray1 = new VarDescription[2];
      varDescriptionArray1[0] = varDescription0;
      varDescriptionArray1[1] = varDescription0;
      ActivationRecord activationRecord0 = new ActivationRecord((String) null, "I:;R;tzlf(S}6(Ya", "I:;R;tzlf(S}6(Ya", "+ =s)@n", "", varDescriptionArray0, varDescriptionArray1);
      activationRecordArray0[0] = activationRecord0;
      String string0 = jsonUtils0.buildJson(activationRecordArray0, varDescriptionArray0, varDescriptionArray1, "", "+ =s)@n");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      // Undeclared exception!
      try { 
        jsonUtils0.getEaxValueTypeFromJson((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ru.innopolis.lips.memvit.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
      StateImpl stateImpl0 = new StateImpl("");
      // Undeclared exception!
      try { 
        jsonUtils0.getEaxValueFromJson(stateImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         assertThrownBy("org.json.JSONTokener", e);
      }
  }
}
